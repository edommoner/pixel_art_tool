class BaseNbtWriter {
  constructor(littleEndian) {
    this.le = littleEndian;
  }
  _append(dst, src) {
    for (let i = 0; i < src.length; i++) dst.push(src[i]);
  }
  _u8(n) {
    return [255 & n];
  }
  _i16(n) {
    const b = new Uint8Array(2);
    return (new DataView(b.buffer).setInt16(0, n, this.le), [...b]);
  }
  _i32(n) {
    const b = new Uint8Array(4);
    return (new DataView(b.buffer).setInt32(0, n, this.le), [...b]);
  }
  _u16be(n) {
    const b = new Uint8Array(2);
    return (new DataView(b.buffer).setUint16(0, n, !1), [...b]);
  }
  _str(s) {
    const u8 = new TextEncoder().encode(s),
      out = this._u16be(u8.length);
    for (let i = 0; i < u8.length; i++) out.push(u8[i]);
    return out;
  }
  _i32arr(int32arr) {
    const a =
        int32arr instanceof Int32Array ? int32Array : new Int32Array(int32arr),
      b = new Uint8Array(4 * a.length),
      dv = new DataView(b.buffer);
    for (let i = 0; i < a.length; i++) dv.setInt32(4 * i, a[i], this.le);
    return [...b];
  }
  _i32s(nums) {
    const b = new Uint8Array(4 * nums.length),
      dv = new DataView(b.buffer);
    for (let i = 0; i < nums.length; i++)
      dv.setInt32(4 * i, 0 | nums[i], this.le);
    return [...b];
  }
  _isInt32Array(v) {
    return (
      v instanceof Int32Array ||
      (ArrayBuffer.isView(v) &&
        4 === v.BYTES_PER_ELEMENT &&
        v.constructor &&
        v.constructor.name.includes("Int32"))
    );
  }
  _isArrayOfInts(v) {
    return (
      Array.isArray(v) && v.length >= 0 && v.every((n) => Number.isInteger(n))
    );
  }
  _isArrayOfArrayOfInts(v) {
    return (
      Array.isArray(v) &&
      v.length > 0 &&
      v.every((a) => Array.isArray(a) && a.every((n) => Number.isInteger(n)))
    );
  }
  writeNamedCompound(name, obj) {
    const out = [];
    return (
      this._append(out, this._u8(10)),
      this._append(out, this._str(name)),
      this._append(out, this._compoundBody(obj)),
      out.push(0),
      new Uint8Array(out)
    );
  }
  _compoundBody(obj) {
    const out = [];
    for (const [k, v] of Object.entries(obj))
      if (null != v)
        if ("number" == typeof v && Number.isInteger(v))
          (this._append(out, this._u8(3)),
            this._append(out, this._str(k)),
            this._append(out, this._i32(v)));
        else if ("string" != typeof v)
          if (this._isInt32Array(v))
            (this._append(out, this._u8(11)),
              this._append(out, this._str(k)),
              this._append(out, this._i32(v.length)),
              this._append(out, this._i32s([...v])));
          else if (Array.isArray(v)) {
            if (this._isArrayOfArrayOfInts(v)) {
              (this._append(out, this._u8(9)),
                this._append(out, this._str(k)),
                this._append(out, this._u8(9)),
                this._append(out, this._i32(v.length)));
              for (const inner of v)
                (this._append(out, this._u8(3)),
                  this._append(out, this._i32(inner.length)),
                  this._append(out, this._i32s(inner)));
              continue;
            }
            if (v.length > 0 && this._isInt32Array(v[0])) {
              (this._append(out, this._u8(9)),
                this._append(out, this._str(k)),
                this._append(out, this._u8(11)),
                this._append(out, this._i32(v.length)));
              for (const arr of v) {
                const a = this._isInt32Array(arr)
                  ? [...arr]
                  : [...new Int32Array(arr)];
                (this._append(out, this._i32(a.length)),
                  this._append(out, this._i32s(a)));
              }
              continue;
            }
            if (this._isArrayOfInts(v)) {
              (this._append(out, this._u8(9)),
                this._append(out, this._str(k)),
                this._append(out, this._u8(3)),
                this._append(out, this._i32(v.length)),
                this._append(out, this._i32s(v)));
              continue;
            }
            (this._append(out, this._u8(9)),
              this._append(out, this._str(k)),
              this._append(out, this._u8(10)),
              this._append(out, this._i32(v.length)));
            for (const c of v)
              (this._append(out, this._compoundBody(c)), out.push(0));
          } else
            "object" != typeof v ||
              (this._append(out, this._u8(10)),
              this._append(out, this._str(k)),
              this._append(out, this._compoundBody(v)),
              out.push(0));
        else
          (this._append(out, this._u8(8)),
            this._append(out, this._str(k)),
            this._append(out, this._str(v)));
    return out;
  }
}
export class NbtWriterJE extends BaseNbtWriter {
  constructor() {
    super(!1);
  }
}
export class NbtWriterBE extends BaseNbtWriter {
  constructor() {
    super(!0);
  }
  _i32(n) {
    const b = new Uint8Array(4);
    return (new DataView(b.buffer).setInt32(0, n, !0), [...b]);
  }
  _i32s(nums) {
    const b = new Uint8Array(4 * nums.length),
      dv = new DataView(b.buffer);
    for (let i = 0; i < nums.length; i++) dv.setInt32(4 * i, 0 | nums[i], !0);
    return [...b];
  }
}
