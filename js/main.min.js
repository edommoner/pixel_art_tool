import { initElements, els } from "./ui/elements.js";
import { state, setBusy } from "./state.js";
import { assembleActivePalette } from "./color/palette.js";
import { exportLayersAsZip } from "./export/layers-zip.js";
import { exportStructureNbt } from "./export/nbt-structure.js";
function renderPreviewFrom(srcCanvas, scale = 4) {
  const prev = els.previewCanvas,
    w = srcCanvas.width * scale,
    h = srcCanvas.height * scale;
  ((prev.width = w), (prev.height = h));
  const pctx = prev.getContext("2d");
  ((pctx.imageSmoothingEnabled = !1),
    pctx.clearRect(0, 0, w, h),
    pctx.drawImage(srcCanvas, 0, 0, w, h));
}
async function runQuantizeAndDither() {
  const cnv = els.resultCanvas,
    ctx = cnv.getContext("2d", { willReadFrequently: !0 });
  (assembleActivePalette(state),
    (state.paletteSnapshot = state.activePalette.map((p) => [
      p[0],
      p[1],
      p[2],
      p[3],
      p[4],
    ])),
    await state.ops.quantizeAndDither(
      ctx,
      cnv.width,
      cnv.height,
      state.paletteSnapshot
    ),
    renderPreviewFrom(cnv, state.previewScale || 4));
}
(initElements(),
  els.runButton.addEventListener("click", () => runQuantizeAndDither()),
  els.exportLayersBtn.addEventListener("click", async () => {
    try {
      (setBusy(!0), await exportLayersAsZip(state, els.resultCanvas));
    } finally {
      setBusy(!1);
    }
  }),
  els.exportStructureBtn.addEventListener("click", async () => {
    try {
      (setBusy(!0), await exportStructureNbt(state, els.resultCanvas));
    } finally {
      setBusy(!1);
    }
  }),
  renderPreviewFrom(els.resultCanvas, state.previewScale || 4));
