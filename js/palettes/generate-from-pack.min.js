import JSZip from"jszip";async function avgRgbFromPng(bytes){const blob=new Blob([bytes],{type:"image/png"}),url=URL.createObjectURL(blob);try{const img=await new Promise((res,rej)=>{const im=new Image;im.onload=()=>res(im),im.onerror=rej,im.src=url}),w=img.naturalWidth,h=img.naturalHeight,cvs=document.createElement("canvas");cvs.width=w,cvs.height=h;const ctx=cvs.getContext("2d",{willReadFrequently:!0});ctx.drawImage(img,0,0);const{data:data}=ctx.getImageData(0,0,w,h);let r=0,g=0,b=0,c=0;for(let y=0;y<h;y+=4)for(let x=0;x<w;x+=4){const i=4*(y*w+x),a=data[i+3];a>128&&(r+=data[i],g+=data[i+1],b+=data[i+2],c++)}return c?[Math.round(r/c),Math.round(g/c),Math.round(b/c)]:[0,0,0]}finally{URL.revokeObjectURL(url)}}const CATEGORY_RULES=[{re:/(^(?:[a-z_]+)_wool$|^wool(?:_colored)?_[a-z_]+$)/,cat:"wool"},{re:/(^(?:[a-z_]+)_carpet$|^carpet(?:_colored)?_[a-z_]+$)/,cat:"carpet"},{re:/(^(?:[a-z_]+)_concrete$|^concrete_[a-z_]+$)/,cat:"concrete"},{re:/(^(?:[a-z_]+)_concrete_powder$|^concrete_powder_[a-z_]+$)/,cat:"concrete_powder"},{re:/(^(?:[a-z_]+)_terracotta$|^terracotta_[a-z_]+$)/,cat:"terracotta"},{re:/^([a-z_]+)_glazed_terracotta$/,cat:"glazed_terracotta"},{re:/^([a-z_]+)_stained_glass(_pane)?$/,cat:"stained_glass"},{re:/^([a-z_]+)_candle(_?[0-9]*)?$/,cat:"candle"},{re:/^([a-z_]+)_shulker_box$/,cat:"shulker_box"},{re:/^([a-z_]+)_bed$/,cat:"bed"},{re:/^([a-z_]+)_banner$/,cat:"banner"},{re:/^.*_planks$/,cat:"planks"},{re:/^(oak|spruce|birch|jungle|acacia|dark_oak|mangrove|cherry|bamboo).*log.*$/,cat:"logs"},{re:/^(stripped_)?(oak|spruce|birch|jungle|acacia|dark_oak|mangrove|cherry|bamboo).*$/,cat:null},{re:/^(stone|granite|polished_granite|diorite|polished_diorite|andesite|polished_andesite|tuff|calcite|dripstone_block|blackstone|deepslate|basalt|smooth_basalt)$/,cat:"stone_like"},{re:/^(sandstone.*|red_sandstone.*)$/,cat:"sandstone"},{re:/^quartz.*$/,cat:"quartz"},{re:/^prismarine(_bricks|_dark)?$/,cat:"prismarine"},{re:/^copper.*$/,cat:"copper"},{re:/^(netherrack|nether_bricks.*|red_nether_bricks)$/,cat:"nether"},{re:/^(end_stone|purpur.*)$/,cat:"end"},{re:/^(amethyst_block|bone_block|clay|bricks|mud(_bricks)?|moss_block|snow_block|ice|packed_ice|blue_ice)$/,cat:"etc_solid"}],BIOME_TINTED=new Set(["grass_block_top","grass_block_side","grass","tall_grass","fern","large_fern_top","large_fern_bottom","oak_leaves","spruce_leaves","birch_leaves","jungle_leaves","acacia_leaves","dark_oak_leaves","mangrove_leaves","cherry_leaves","azalea_leaves","flowering_azalea_leaves","water_still","water_flow"]);export async function generatePaletteFromVanillaZip(file,{skipBiomeTint:skipBiomeTint=!0}={}){const zip=await JSZip.loadAsync(file),entries=Object.keys(zip.files).filter(p=>{const s=p.toLowerCase();return!!s.endsWith(".png")&&(/(^|\/)assets\/minecraft\/textures\/block(s)?\//.test(s)||/(^|\/)resource_pack\/textures\/blocks\//.test(s)||/(^|\/)textures\/blocks\//.test(s))}),categories=new Map,flat=[],push=(cat,entry)=>{categories.has(cat)||categories.set(cat,[]),categories.get(cat).push(entry),flat.push(entry)};for(const path of entries){const name=path.split("/").pop().replace(".png","");if(skipBiomeTint&&BIOME_TINTED.has(name))continue;const isBedrock=/(^|\/)resource_pack\/textures\/blocks\//i.test(path.toLowerCase())||/(^|\/)textures\/blocks\//i.test(path.toLowerCase()),blockId=`${isBedrock?"bedrock":"minecraft"}:${name}`;let cat="others";for(const rule of CATEGORY_RULES){const m=name.match(rule.re);if(m){rule.cat&&(cat=rule.cat);break}}const bytes=await zip.files[path].async("uint8array"),rgb=await avgRgbFromPng(bytes);push(cat,[rgb[0],rgb[1],rgb[2],blockId,name])}for(const[cat,arr]of categories){const seen=new Set;categories.set(cat,arr.filter(x=>!seen.has(x[3])&&(seen.add(x[3]),!0)))}return{categories:Object.fromEntries(categories),flat:flat}}